// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rppkg/godfrey/internal/apiserver/dal (interfaces: IDal,IUserDal)

// Package dal is a generated GoMock package.
package dal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"

	query "github.com/rppkg/godfrey/internal/apiserver/dal/query"
	models "github.com/rppkg/godfrey/internal/pkg/models"
)

// MockIDal is a mock of IDal interface
type MockIDal struct {
	ctrl     *gomock.Controller
	recorder *MockIDalMockRecorder
}

// MockIDalMockRecorder is the mock recorder for MockIDal
type MockIDalMockRecorder struct {
	mock *MockIDal
}

// NewMockIDal creates a new mock instance
func NewMockIDal(ctrl *gomock.Controller) *MockIDal {
	mock := &MockIDal{ctrl: ctrl}
	mock.recorder = &MockIDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDal) EXPECT() *MockIDalMockRecorder {
	return m.recorder
}

// DB mocks base method
func (m *MockIDal) DB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockIDalMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockIDal)(nil).DB))
}

// DBQuery mocks base method
func (m *MockIDal) DBQuery() *query.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBQuery")
	ret0, _ := ret[0].(*query.Query)
	return ret0
}

// DBQuery indicates an expected call of DBQuery
func (mr *MockIDalMockRecorder) DBQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBQuery", reflect.TypeOf((*MockIDal)(nil).DBQuery))
}

// Users mocks base method
func (m *MockIDal) Users() IUserDal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(IUserDal)
	return ret0
}

// Users indicates an expected call of Users
func (mr *MockIDalMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockIDal)(nil).Users))
}

// MockIUserDal is a mock of IUserDal interface
type MockIUserDal struct {
	ctrl     *gomock.Controller
	recorder *MockIUserDalMockRecorder
}

// MockIUserDalMockRecorder is the mock recorder for MockIUserDal
type MockIUserDalMockRecorder struct {
	mock *MockIUserDal
}

// NewMockIUserDal creates a new mock instance
func NewMockIUserDal(ctrl *gomock.Controller) *MockIUserDal {
	mock := &MockIUserDal{ctrl: ctrl}
	mock.recorder = &MockIUserDalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUserDal) EXPECT() *MockIUserDalMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockIUserDal) Create(arg0 context.Context, arg1 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIUserDalMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserDal)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockIUserDal) Delete(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIUserDalMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserDal)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockIUserDal) Get(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIUserDalMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUserDal)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockIUserDal) List(arg0 context.Context, arg1, arg2 int) ([]*models.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List
func (mr *MockIUserDalMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIUserDal)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockIUserDal) Update(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockIUserDalMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserDal)(nil).Update), arg0, arg1)
}
